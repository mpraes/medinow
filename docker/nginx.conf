# 🐳 MediNow Docker & ngrok Setup

This guide provides complete instructions for containerizing your MediNow application with Docker and exposing it via ngrok for external access.

## 📋 What's Included

- **Dockerfile** - Optimized Python 3.13 container
- **docker-compose.yml** - Multi-service orchestration
- **docker-run.sh** - Convenience management script
- **ngrok-setup.sh** - ngrok tunnel management
- **nginx.conf** - Production reverse proxy configuration

## 🚀 Quick Start (30 seconds)

```bash
# 1. Make sure your .env file is configured
cp .env.example .env
# Edit .env with your credentials

# 2. Run the complete setup
./ngrok-setup.sh setup

# That's it! Your app is now accessible via ngrok
```

## 📖 Detailed Setup

### Prerequisites

1. **Docker & Docker Compose**
   ```bash
# Install Docker
   curl -fsSL https://get.docker.com -o get-docker.sh
   sudo sh get-docker.sh
   
   # Install Docker Compose
   sudo apt install docker-compose-plugin
```

2. **ngrok Account**
   - Sign up at [ngrok.com](https://ngrok.com)
   - Get your authtoken from [dashboard](https://dashboard.ngrok.com/get-started/your-authtoken)

### Step-by-Step Setup

#### 1. Configure Environment Variables

```bash
# Make sure your .env file has the required variables
cat .env
```

Required variables:
```bash
TWILIO_ACCOUNT_SID=your_twilio_account_sid
TWILIO_AUTH_TOKEN=your_twilio_auth_token
TWILIO_PHONE_NUMBER=your_twilio_phone_number
GROQ_API_KEY=your_groq_api_key
COMPOSIO_API_KEY=your_composio_api_key
```

#### 2. Build and Run with Docker

```bash
# Option A: Using convenience script (recommended)
./docker-run.sh run

# Option B: Using Docker Compose directly
docker-compose up -d

# Option C: Simple Docker run
./docker-run.sh run-simple
```

#### 3. Verify Application

```bash
# Check health
./docker-run.sh health

# View logs
./docker-run.sh logs

# Check status
curl http://localhost:8000/health
```

#### 4. Setup ngrok Tunnel

```bash
# Complete ngrok setup (if not done in quick start)
./ngrok-setup.sh setup

# Or manually:
./ngrok-setup.sh authtoken  # Setup authtoken
./ngrok-setup.sh start-bg   # Start tunnel in background
./ngrok-setup.sh info       # Get tunnel URLs
```

#### 5. Configure Twilio Webhook

1. Get your ngrok URL: `./ngrok-setup.sh info`
2. In Twilio Console → Phone Numbers → Your WhatsApp Number
3. Set webhook URL to: `https://your-ngrok-url.ngrok.io/webhook/twilio`

## 🛠️ Management Commands

### Docker Management

```bash
./docker-run.sh build      # Build Docker image
./docker-run.sh run        # Start with Docker Compose
./docker-run.sh stop       # Stop containers
./docker-run.sh restart    # Restart application
./docker-run.sh logs       # View logs
./docker-run.sh health     # Check health
./docker-run.sh cleanup    # Clean up resources
```

### ngrok Management

```bash
./ngrok-setup.sh setup     # Complete setup
./ngrok-setup.sh start     # Start tunnel (foreground)
./ngrok-setup.sh start-bg  # Start tunnel (background)
./ngrok-setup.sh info      # Show tunnel URLs
./ngrok-setup.sh stop      # Stop tunnels
./ngrok-setup.sh status    # Show complete status
```

## 🔧 Configuration Options

### Docker Compose Profiles

```bash
# Development (default)
docker-compose up -d

# Production with nginx
docker-compose --profile production up -d
```

### ngrok Configuration

The setup script creates `~/.ngrok2/ngrok.yml`:

```yaml
version: "2"
authtoken: your_authtoken
tunnels:
  medinow:
    proto: http
    addr: 8000
    subdomain: your-subdomain  # requires paid plan
    inspect: true
```

### Environment Modes

```bash
# Development
ENVIRONMENT=development
DEBUG=true

# Production
ENVIRONMENT=production
DEBUG=false
```

## 📊 Monitoring & Debugging

### Application Health

```bash
# Health endpoint
curl http://localhost:8000/health

# Through ngrok
curl https://your-ngrok-url.ngrok.io/health
```

### Logs and Monitoring

```bash
# Application logs
./docker-run.sh logs

# ngrok dashboard
open http://localhost:4040

# Docker stats
docker stats medinow-container
```

### Debug Webhooks

1. **Check ngrok dashboard**: `http://localhost:4040`
2. **View request history and payloads**
3. **Test webhook manually**:

```bash
curl -X POST https://your-ngrok-url.ngrok.io/webhook/twilio \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "From=whatsapp:+1234567890&Body=test&AccountSid=your_account_sid"
```

## 🏗️ Architecture

```
┌─────────────────┐    ┌──────────────┐    ┌───────────────┐
│   Twilio API    │────│    ngrok     │────│   MediNow     │
│   (WhatsApp)    │    │   Tunnel     │    │   Container   │
└─────────────────┘    └──────────────┘    └───────────────┘
                              │                     │
                              │                     │
                       ┌──────────────┐    ┌───────────────┐
                       │   ngrok      │    │   FastAPI     │
                       │  Dashboard   │    │   App:8000    │
                       │  :4040       │    └───────────────┘
                       └──────────────┘
```

## 🚀 Production Deployment

### Option 1: Cloud Platforms

**DigitalOcean App Platform**
```bash
# Build and push to registry
docker build -t your-registry/medinow:latest .
docker push your-registry/medinow:latest
```

**AWS ECS/Fargate**
```bash
# Use the Dockerfile with AWS CDK/CloudFormation
```

**Google Cloud Run**
```bash
gcloud run deploy medinow \
  --image=your-registry/medinow:latest \
  --port=8000 \
  --allow-unauthenticated
```

### Option 2: VPS with Domain

```bash
# Use production docker-compose
docker-compose --profile production up -d

# Configure your domain's DNS to point to your server
# Update nginx.conf with your actual SSL certificates
```

## 🔒 Security Considerations

1. **Environment Variables**
   - Never commit `.env` files
   - Use secrets management in production
   - Rotate API keys regularly

2. **Network Security**
   - Use HTTPS in production
   - Configure proper CORS settings
   - Enable rate limiting

3. **ngrok Security**
   - Use authentication for sensitive data
   - Consider paid plans for custom domains
   - Monitor tunnel usage

## 🐛 Troubleshooting

### Common Issues

**Container won't start**
```bash
# Check logs
docker-compose logs medinow-app

# Check port availability
lsof -i :8000

# Rebuild image
docker-compose build --no-cache
```

**ngrok tunnel fails**
```bash
# Check authtoken
ngrok config check

# View detailed logs
ngrok http 8000 --log=stdout

# Check account status
ngrok credits
```

**Webhook not receiving**
```bash
# Verify tunnel is accessible
curl https://your-ngrok-url.ngrok.io/health

# Check Twilio webhook configuration
# Review ngrok request logs at localhost:4040
```

### Getting Help

1. **Check logs**: `./docker-run.sh logs`
2. **Verify status**: `./ngrok-setup.sh status`
3. **Test endpoints**: Use the provided curl commands
4. **Review configuration**: Check `.env` and ngrok config

## 📚 Additional Resources

- [Docker Documentation](https://docs.docker.com/)
- [ngrok Documentation](https://ngrok.com/docs)
- [Twilio Webhook Guide](https://www.twilio.com/docs/usage/webhooks)
- [FastAPI Deployment](https://fastapi.tiangolo.com/deployment/)

---

## 📝 File Structure

```
medinow/
├── Dockerfile                 # Container definition
├── docker-compose.yml        # Multi-service orchestration
├── .dockerignore             # Docker ignore rules
├── docker-run.sh             # Docker management script
├── ngrok-setup.sh            # ngrok management script
├── docker/
│   ├── nginx.conf            # Nginx configuration
│   └── README.md             # Detailed guide
└── .env                      # Environment variables
```

This setup provides a production-ready containerized deployment of your MediNow application with easy external access via ngrok! 🎉# MediNow with ngrok Setup Guide

This guide explains how to use MediNow with Docker and expose it using ngrok for external access (useful for Twilio webhooks and testing).

## Prerequisites

1. **Docker & Docker Compose** installed
2. **ngrok** account and installation
3. **Environment variables** configured

## Quick Start

### 1. Setup Environment Variables

```bash
# Copy and edit the environment file
cp .env.example .env
# Edit .env with your actual credentials
```

### 2. Build and Run with Docker

```bash
# Using the convenience script (recommended)
./docker-run.sh run

# Or manually with docker-compose
docker-compose up -d
```

### 3. Verify Application is Running

```bash
# Check health
./docker-run.sh health

# Or manually
curl http://localhost:8000/health
```

## ngrok Integration

### Install ngrok

```bash
# Download and install ngrok
curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
sudo apt update && sudo apt install ngrok

# Or using snap
sudo snap install ngrok
```

### Configure ngrok

```bash
# Add your authtoken (get it from https://dashboard.ngrok.com/get-started/your-authtoken)
ngrok config add-authtoken YOUR_AUTHTOKEN_HERE
```

### Expose MediNow with ngrok

```bash
# Start ngrok tunnel to your Docker container
ngrok http 8000

# For a custom subdomain (requires paid plan)
ngrok http 8000 --subdomain=medinow-yourname

# For a custom domain (requires paid plan)
ngrok http 8000 --hostname=medinow.yourdomain.com
```

### Configure Twilio Webhook

1. Copy the ngrok URL (e.g., `https://abc123.ngrok.io`)
2. In your Twilio Console:
   - Go to Phone Numbers → Manage → Active numbers
   - Select your WhatsApp number
   - Set webhook URL to: `https://your-ngrok-url.ngrok.io/webhook/twilio`

## Production Deployment Options

### Option 1: Simple Docker Run

```bash
# Build and run directly
./docker-run.sh run-simple
```

### Option 2: With Nginx Reverse Proxy

```bash
# Run with nginx (production profile)
docker-compose --profile production up -d
```

### Option 3: Cloud Deployment

For production, consider deploying to:
- **DigitalOcean App Platform**
- **AWS ECS/Fargate**
- **Google Cloud Run**
- **Azure Container Instances**

## Useful Commands

```bash
# View logs
./docker-run.sh logs

# Stop application
./docker-run.sh stop

# Restart application
./docker-run.sh restart

# Clean up Docker resources
./docker-run.sh cleanup

# Manual Docker commands
docker-compose ps                    # Check status
docker-compose logs -f medinow-app  # Follow logs
docker-compose exec medinow-app bash # Shell access
```

## ngrok Advanced Configuration

### Create ngrok Configuration File

```bash
# Create ~/.ngrok2/ngrok.yml
mkdir -p ~/.ngrok2
cat > ~/.ngrok2/ngrok.yml << EOF
version: "2"
authtoken: YOUR_AUTHTOKEN_HERE
tunnels:
  medinow:
    proto: http
    addr: 8000
    subdomain: medinow-yourname  # requires paid plan
    inspect: true
  medinow-secure:
    proto: http
    addr: 8000
    hostname: medinow.yourdomain.com  # requires paid plan
    inspect: true
EOF
```

### Use Named Tunnels

```bash
# Start specific tunnel
ngrok start medinow

# Start multiple tunnels
ngrok start medinow medinow-secure
```

## Monitoring and Debugging

### Check Application Health

```bash
# Health endpoint
curl http://localhost:8000/health

# Through ngrok
curl https://your-ngrok-url.ngrok.io/health
```

### View ngrok Dashboard

Open `http://localhost:4040` to see:
- Active tunnels
- Request history
- Traffic inspection

### Debug Webhooks

1. Check ngrok request logs at `http://localhost:4040`
2. View application logs: `./docker-run.sh logs`
3. Test webhook manually:

```bash
curl -X POST https://your-ngrok-url.ngrok.io/webhook/twilio \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "From=whatsapp:+1234567890&Body=test&AccountSid=your_account_sid"
```

## Environment Variables Reference

```bash
# Required for Twilio
TWILIO_ACCOUNT_SID=your_twilio_account_sid
TWILIO_AUTH_TOKEN=your_twilio_auth_token
TWILIO_PHONE_NUMBER=your_twilio_phone_number

# Required for AI
GROQ_API_KEY=your_groq_api_key

# Required for Calendar
COMPOSIO_API_KEY=your_composio_api_key

# Optional
ENVIRONMENT=production
DEBUG=false
```

## Troubleshooting

### Common Issues

1. **Container won't start**
   ```bash
# Check logs
   docker-compose logs medinow-app
   
   # Check if port is available
   lsof -i :8000
```

2. **ngrok tunnel disconnects**
   ```bash
# Use --log to see detailed logs
   ngrok http 8000 --log=stdout
   
   # Check your account limits
   ngrok credits
```

3. **Twilio webhook fails**
   - Verify ngrok URL is accessible
   - Check Twilio webhook configuration
   - Validate request format in ngrok dashboard

### Health Checks

The application includes health checks at:
- `/health` - Basic health status
- Docker health check every 30 seconds
- ngrok tunnel monitoring

## Security Considerations

1. **Never commit .env files**
2. **Use secrets management in production**
3. **Enable HTTPS in production**
4. **Configure proper CORS settings**
5. **Use ngrok's authentication features for sensitive data**

For production deployments, replace ngrok with proper domain and SSL certificate management.events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/x-javascript
        application/xml+rss
        application/json;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    # Upstream backend
    upstream medinow_backend {
        server medinow-app:8000;
    }

    # HTTP server (redirects to HTTPS)
    server {
        listen 80;
        server_name _;
        
        # Health check endpoint
        location /health {
            proxy_pass http://medinow_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name _;

        # SSL configuration (when certificates are available)
        # ssl_certificate /etc/nginx/ssl/cert.pem;
        # ssl_certificate_key /etc/nginx/ssl/key.pem;
        
        # For development/testing without SSL
        ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
        ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";

        # Proxy settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;

        # API endpoints
        location / {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://medinow_backend;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # WebSocket support (if needed)
        location /ws {
            proxy_pass http://medinow_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}